pipeline {

    agent { label "jenkins-agent" }

    tools {
        terraform 'terraform'
        dockerTool 'docker'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
        ansiColor('xtrem')
    }

    environment {
        KIND_HOME = tool name: 'kind', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
        KUBECTL_HOME = tool name: 'kubectl', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
        DOCKERCOMPOSE_HOME = tool name: 'dockercompose', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
        PATH = "${KIND_HOME}:${KUBECTL_HOME}:${env.PATH}"
        AWS_ACCESS_KEY_ID = credentials('accessKey')
        AWS_SECRET_ACCESS_KEY = credentials('secretKey')
        PROJECT_FOLDER_PATH = 'terraform/structure'
        PROJECT_DOCKER_FOLDER_PATH = 'deploy'
        PROJECT_KIND_FOLDER_PATH = 'kind'
        PROJECT_DEPLOY_FOLDER_PATH = 'project'
        PROJECT_APPS_FOLDER_PATH = 'project/project-app'
        KUBECONFIG = '/home/jenkins/.kube/config'
    }

    stages {
        stage('Terraform Init') {
            steps {
                dir(PROJECT_FOLDER_PATH) {
                    sh "terraform init -input=false"
                }
            }
        }

        stage('Terraform validate') {
            steps {
                dir(PROJECT_FOLDER_PATH) {
                    sh "terraform validate"
                }
            }
        }

        stage('Terraform plan') {
            steps {
                script {
                    SKIP_TERRAFORM_APPLY = false
                    dir(PROJECT_FOLDER_PATH) {
                        log = sh(returnStdout: true, script: "terraform plan -var 'access_key=${AWS_ACCESS_KEY_ID}' -var 'secret_key=${AWS_SECRET_ACCESS_KEY}' -out terraform.tfplan").trim()
                        println log
                        log.readLines().collect { line ->
                            if (line =~ "No changes") {
                                SKIP_TERRAFORM_APPLY = true
                            }
                        }
                        stash name: "terraform-plan", includes: "terraform.tfplan"
                    }
                }
            }
        }

        stage('Terraform apply') {
            when {
                expression { !SKIP_TERRAFORM_APPLY }
            }
            steps {
                script {
                    def apply = false
                    input message: 'Confirm plan?', ok: 'Apply'
                    apply = true
                    if (apply) {
                        dir(PROJECT_FOLDER_PATH) {
                            unstash "terraform-plan"
                            sh "terraform apply terraform.tfplan"
                        }
                    }
                }
            }
        }

        stage('Terraform output') {
            steps {
                script {
                    dir(PROJECT_FOLDER_PATH) {
                        DOCKER_HOST = sh(returnStdout: true, script: "terraform output aws_instance_Dockerstation_ip").trim().replaceAll('"','')
                        println DOCKER_HOST
                    }
                }
            }
        }

        stage('Waiting cloud-init') {
            steps {
                script {
                    DOCKER_UP = false
                    while (!DOCKER_UP) {
                        try {
                            sh """
                            export DOCKER_HOST="tcp://${DOCKER_HOST}"
                            docker version                            
                            docker ps
                            """
                            DOCKER_UP = true
                        } catch (err) {
                            println "Waiting remote docker up..."
                            sleep 10
                        }
                    }
                }
            }
        }
        
        stage('Create kind cluster') {
            steps {
                script {
                    dir(PROJECT_KIND_FOLDER_PATH) {
                        sh """
                        export DOCKER_HOST="tcp://${DOCKER_HOST}"
                        export DOCKER_HOST_IP=${DOCKER_HOST}
                        export KUBECONFIG=${KUBECONFIG}
                        bash kind_create.sh
                        """
                    }
                }
            }
        }

        stage('Create applications') {
            steps {
                script {
                    dir(PROJECT_APPS_FOLDER_PATH) {
                        sh """
                        export DOCKER_HOST="tcp://${DOCKER_HOST}"
                        export DOCKER_HOST_IP=${DOCKER_HOST}
                        export KUBECONFIG=${KUBECONFIG}
                        bash project-app.sh
                        """
                    }
                }
            }
        }

        stage('Create project deployment') {
            steps {
                script {
                    dir(PROJECT_DEPLOY_FOLDER_PATH) {
                        sh """
                        export DOCKER_HOST="tcp://${DOCKER_HOST}"
                        export DOCKER_HOST_IP=${DOCKER_HOST}
                        export KUBECONFIG=${KUBECONFIG}
                        bash install_prometheus.sh
                        """
                    }
                }
            }
        }

        // stage('Create dockercompose deploy') {
        //     steps {
        //         script {
        //             dir(PROJECT_DOCKER_FOLDER_PATH) {
        //                 sh """
        //                 export DOCKER_HOST="tcp://${DOCKER_HOST}"
        //                 export DOCKER_HOST_IP=${DOCKER_HOST}                        
        //                 ls /home/jenkins/agent
        //                 bash docker_deploy.sh                 
        //                 """
        //             }
        //         }
        //     }
        // }
    }
}